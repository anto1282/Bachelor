//Profile config names for nf-core/configs
conda.enabled = true
conda.channels = ["defaults", "conda-forge", "bioconda"]
conda.useMamba = true
conda.cacheDir = ".conda_cache"
profiles{
    local{
             
        params{
            max_memory = 16.GB
            max_cpus = 8
            max_time = 20.h

            IDS = false // Write IDS in terminal or here to specify SRA nr
            pair_file_names = false // Write pair_file_names to specify a glob pattern to run pipeline on multiple local file pairs at once
                     
            bigDB = false // Specifies if kraken needs more memory inorder to use the large version of krakenDB
            server = false // Specifies if pipeline runs on server (HPC) or not.
            cutoff = 0.7
            
            outdir = "./Results"
            krakDB = "${projectDir}/../KrakenDB"                       
            phaDB = "${projectDir}/../PHAROKKADB"
            DVFPath = "${projectDir}/../DeepVirFinder/dvf.py"
            checkVDB = "~/Bachelor/checkv-db-v1.5"
            iphopDB = false
            basepath = "~/"
            contigs = "scaffolds"
            singularityCacheDir = '~/cache'
            
            
            minLength = 1001 // // must be larger than 1000 for Pharokka to function
            contigs = "scaffolds"  // choose between "scaffolds" or "contigs", specifying which file the pipeline uses after assembly                 
            phredoffset = "33" // choose between "33" and "64"
            }
        
        process {
            errorStrategy = 'finish'
            executor = 'local'
            cpus = 4
            memory = 4.GB
            time = 1.h
            debug = true
            }
        
        singularity {
                enabled = true
                autoMounts = true
                runOptions = "-B ${params.basepath}"
                cacheDir = params.singularityCacheDir
                envWhitelist = ['SINGULARITY_TMPDIR']
        }

    }

    cluster {
        params {
            max_memory = 1000.GB
            max_cpus = 96
            max_time = 720.h
                       
            IDS = false // Write IDS in terminal or here to specify SRA nr
            pair_file_names = false // Write pair_file_names to specify a glob pattern to run pipeline on multiple local file pairs at once
            
            bigDB = false
            server = true
            cutoff = 0.7
            
            // Fill out these paths to fit your specific system
            outdir = "./Results"
            krakDB = "/maps/projects/mjolnir1/data/databases/kraken2/kraken2_standard/20220926"
            phaDB = "/maps/projects/mjolnir1/apps/conda/pharokka-1.2.1/pharokka_v1.2.0_databases"
            DATABASEDIR = "/maps/projects/mjolnir1/data/databases"
            DVFPath = "dvf.py"
            iphopDB = "/maps/projects/mjolnir1/data/databases/iphop/20230317/Sept_2021_pub"
            checkVDB = "/maps/projects/mjolnir1/data/databases/checkv/20230320/checkv-db-v1.5"
            virsorterDB = "/maps/projects/mjolnir1/data/databases/virsorter/20230317/"
            basepath = "/maps" // Basepath used for singularity, change if basepath is not maps
            singularityCacheDir = '/maps/projects/mjolnir1/data/cache/nf-core/singularity'
            
            // Write your token for Tower.nf (nextflow tower)
            accessToken = "writeTokenForNextflowTower"                     
            
            minLength = 1001 // // must be larger than 1000 for Pharokka to function
            contigs = "scaffolds"  // choose between "scaffolds" or "contigs", specifying which file the pipeline uses after assembly                 
            iou = "intersection" // choose between "intersection" or "union", used by virextractor.py 
            phredoffset = "33" // choose between "33" and "64"
            }
        
        singularity {
                enabled = true
                autoMounts = true
                runOptions = "-B ${params.basepath}"
                cacheDir = params.singularityCacheDir
                envWhitelist = ['SINGULARITY_TMPDIR']

                
        }

        process {
            errorStrategy = 'ignore'
            
            cpus = 4
            memory = 4.GB
            time = 1.h
            }
        
        
        cleanup = true // Change to false if you don't want temp files to be deleted after succesfull run
            
        executor {
            name = 'slurm'
            queueSize = 25
            
        }
        
        cache = 'lenient'
        
        tower {
            enabled = true
            accessToken = params.accessToken}
    }
}

process {

    withLabel:bigTask {
        cpus = 16
        memory = 32.GB
        time = 3.h}

    withLabel:gpuTask {
        cpus = 16
        memory = 32.GB
        time = 3.h}

    withLabel:shortTask {
        cpus = 4
        memory = 4.GB
        time = 1.h}
}
